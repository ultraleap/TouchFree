variables:
  GIT_SUBMODULE_STRATEGY: recursive
  TF_SETTINGS_PROJECT_PATH: $CI_PROJECT_DIR/TF_Settings_and_Tooling_Unity
  TF_PROJECT_PATH: $CI_PROJECT_DIR/TF_Application
  UNITY_HUB: "C:/Program Files/Unity Hub/Unity Hub.exe"

  TF_TFW_PATH: $CI_PROJECT_DIR/TF_Tooling_Web
  TF_TFU_PATH: $CI_PROJECT_DIR/TF_Settings_and_Tooling_Unity/Assets/TouchFree/Tooling
  TF_SETTINGS_PATH: $CI_PROJECT_DIR/TF_Settings_and_Tooling_Unity/Assets/TouchFree/SettingsUI

  BS_EXTENSION_NAME: ultouchfree

  TF_TFU_VERSION: '1.1.0'
  TF_TFW_VERSION: '1.1.0'
  TOUCHFREE_VERSION: '2.3.0'

  TF_TOOLING_API_VERSION: '1.2.0'

  TARGET_TRACKING_JOBID_WIN: 596994

stages:
  - build
  - test
  - package
  - installer

TF_Tooling::Unity::build:
  stage: build
  when: always
  script:
    # Get Unity version and changeset from the project.
    - $line = Get-Content  $TF_SETTINGS_PROJECT_PATH/ProjectSettings/ProjectVersion.txt | Select -Index 1
    - $UNITY_VERSION = $line -Split " " | Select -Index 1
    - $UNITY_CHANGESET = $line -Match '\((.+)\)' | ForEach-Object { $Matches[1] }
    # Check whether the required Unity version is installed. If not, install it.
    - Start-Process -Wait -RedirectStandardOutput "tmp.txt" -FilePath "$UNITY_HUB" -ArgumentList "-- --headless editors --installed"
    - Get-Content "tmp.txt"
    - Start-Process -Wait -RedirectStandardOutput "tmp.txt" -FilePath "$UNITY_HUB" -ArgumentList "-- --headless install-path --set C:/Unity"
    - Get-Content "tmp.txt"
    - if (-not (Test-Path "C:/Unity/$UNITY_VERSION")) { Start-Process -Wait -RedirectStandardOutput "tmp.txt" -FilePath "$UNITY_HUB" -ArgumentList "-- --headless install --version $UNITY_VERSION --changeset $UNITY_CHANGESET" }
    - Get-Content "tmp.txt"

    - $UNITY_EXE = "C:/Unity/$UNITY_VERSION/Editor/Unity.exe"
    - echo "$UNITY_EXE"

    # Update Version.txt with latest information before packaging
    - python ./Scripts/UpdateVersionFile.py --path ${env:TF_TFU_PATH}/Version.txt --swVer ${env:TF_TFU_VERSION} --apiVer ${env:TF_TOOLING_API_VERSION} --ref ${env:CI_COMMIT_SHORT_SHA} --branchName "$CI_COMMIT_BRANCH"
    - Get-Content ${env:TF_PROJECT_PATH}/Assets/TouchFree_Application/Version.txt

    # Copy Version.txt to Tooling_Release folder
    - if (Test-Path -Path "./Tooling_Release") {
        Remove-Item -LiteralPath ./Tooling_Release -Force -Recurse
        Remove-Item -LiteralPath ./Tooling_Release -Force -Recurse
      }
    - mkdir ./Tooling_Release
    - cp ${env:CI_PROJECT_DIR}/TF_Settings_and_Tooling_Unity/Assets/TouchFree/Tooling/Version.txt ./Tooling_Release

    # Package Tooling
    - cd ./Scripts
    - "& ./package_unity_Tooling.bat $UNITY_EXE"
  artifacts:
    name: "Tooling_for_Unity_Build_${env:CI_COMMIT_SHORT_SHA}"
    paths:
      - ./Tooling_Release/*
      - ./Tooling_for_Unity_package.log
    expire_in: 2 weeks
    when: always
  tags:
    - unity
    - win10

TF_Tooling::Web::build:
  stage: build
  when: always
  script:
    # Update Version.txt with latest information before packaging
    - python ./Scripts/UpdateVersionFile.py --path ${env:TF_TFW_PATH}/Version.txt --swVer ${env:TF_TFW_VERSION} --apiVer ${env:TF_TOOLING_API_VERSION} --ref ${env:CI_COMMIT_SHORT_SHA} --branchName "$CI_COMMIT_BRANCH"
    - Get-Content ${env:TF_PROJECT_PATH}/Assets/TouchFree_Application/Version.txt

    # Build Tooling
    - cd ${env:TF_TFW_PATH}
    - npm i
    - npm run build
    # Clean last build
    - cd ${env:CI_PROJECT_DIR}
    - if (Test-Path -Path "./Tooling_Release") {
        Remove-Item -LiteralPath ./Tooling_Release -Force -Recurse
        Remove-Item -LiteralPath ./Tooling_Release -Force -Recurse
      }
    # Package Tooling
    - mkdir ./Tooling_Release
    - cp ${env:TF_TFW_PATH}/Version.txt ./Tooling_Release
    - cp -R ${env:TF_TFW_PATH}/dist ./Tooling_Release
    - cp -R ${env:TF_TFW_PATH}/Plugins ./Tooling_Release
    - cp -R ${env:TF_TFW_PATH}/quick-start ./Tooling_Release
  artifacts:
    name: "Tooling_for_Web_Build_${env:CI_COMMIT_SHORT_SHA}"
    paths:
      - ./Tooling_Release/*
    expire_in: 2 weeks
    when: always
  tags:
    - unity
    - win10

TF_Tooling::Docs::build:
  stage: build
  when: always
  image: registry.ultrahaptics.com/apps/infrastructure/docker-naturaldocs:main
  script:
    - mono "/opt/Natural Docs/NaturalDocs.exe" $CI_PROJECT_DIR/TF_Settings_and_Tooling_Unity/NaturalDocs_Config
    - mono "/opt/Natural Docs/NaturalDocs.exe" $CI_PROJECT_DIR/TF_Tooling_Web/NaturalDocs_Config
  artifacts:
    name: "TouchFree_Tooling_Documentation"
    paths:
    - ./Documentation/*
    expire_in: 2 weeks
    when: always
  tags:
    - docker

TF_Service::Wrapper::build:
  stage: build
  when: always
  image: registry.ultrahaptics.com/xr/infrastucture/dotnet6-toolchain:latest
  script:
    - dotnet publish -c Release -r win-x64 "$CI_PROJECT_DIR/TF_Service_Utilities/ServiceWrapper/ServiceWrapper/ServiceWrapper.csproj"
    # Move the built wrapper to the root directory
    - mkdir ./Service_Wrapper_Build
    - cp -R $CI_PROJECT_DIR/TF_Service_Utilities/ServiceWrapper/ServiceWrapper/bin/Release/net6.0/win-x64/publish/* ./Service_Wrapper_Build

    # Sign the executable with the UltraLeap certificate
    - azuresigntool sign -du "https://www.ultraleap.com" -kvu "https://$env:SIGN_VAULT_ID.vault.azure.net/"  -kvi "$env:SIGN_VAULT_APPLICATION_ID" -kvs "$env:SIGN_VAULT_APPLICATION_CLIENT_CODE" -kvc "ultraleap-ltd" -kvt "$env:SIGN_VAULT_TENANT_ID" -tr http://timestamp.digicert.com -v "$CI_PROJECT_DIR/Service_Wrapper_Build/ServiceWrapper.exe"
  artifacts:
    name: "TouchFree_Service_Wrapper"
    paths:
    - ./Service_Wrapper_Build/**
    expire_in: 2 weeks
    when: always
  tags:
    - docker-windows

TF_Service::dotNet::Windows::build:
  stage: build
  when: always
  image: registry.ultrahaptics.com/xr/infrastucture/dotnet6-toolchain:latest
  script:
    - dotnet publish -c Release -r win-x64 "$CI_PROJECT_DIR/TF_Service_dotNet/TouchFree/TouchFreeLib.csproj"
    - dotnet publish -c Release -r win-x64 "$CI_PROJECT_DIR/TF_Service_dotNet/TouchFree_Service/TouchFree_Service.csproj"

    # Move the built executable to the root directory
    - if (Test-Path -Path "./Service_dotNet_Build") {
        Remove-Item -LiteralPath ./Service_dotNet_Build -Force -Recurse
        Remove-Item -LiteralPath ./Service_dotNet_Build -Force -Recurse
      }
    - mkdir ./Service_dotNet_Build
    - cp -R "$CI_PROJECT_DIR/TF_Service_dotNet/TouchFree_Service/bin/Release/net6.0/win-x64/publish/*" ./Service_dotNet_Build


    # Sign the executable with the UltraLeap certificate
    - azuresigntool sign -du "https://www.ultraleap.com" -kvu "https://$env:SIGN_VAULT_ID.vault.azure.net/"  -kvi "$env:SIGN_VAULT_APPLICATION_ID" -kvs "$env:SIGN_VAULT_APPLICATION_CLIENT_CODE" -kvc "ultraleap-ltd" -kvt "$env:SIGN_VAULT_TENANT_ID" -tr http://timestamp.digicert.com -v "$CI_PROJECT_DIR/Service_dotNet_Build/TouchFree_Service.exe"
  artifacts:
    name: "TouchFree_Service_dotNet"
    paths:
    - ./Service_dotNet_Build/**
    expire_in: 2 weeks
    when: always
  tags:
    - docker-windows

TF_Service::dotNet::ARMLinux::build:
  stage: build
  when: always
  image: registry.ultrahaptics.com/xr/infrastucture/dotnet6-toolchain:latest
  script:
    - dotnet publish -c Release -r linux-arm64 "$CI_PROJECT_DIR/TF_Service_dotNet/TouchFree/TouchFreeLib.csproj"
    - dotnet publish -c Release -r linux-arm64 "$CI_PROJECT_DIR/TF_Service_dotNet/TouchFree_Service/TouchFree_Service.csproj"

    # Move the built executable to the root directory
    - if (Test-Path -Path "./Service_dotNet_Build_ARMLinux") {
        Remove-Item -LiteralPath ./Service_dotNet_Build_ARMLinux -Force -Recurse
        Remove-Item -LiteralPath ./Service_dotNet_Build_ARMLinux -Force -Recurse
      }
    - mkdir ./Service_dotNet_Build_ARMLinux
    - cp -R "$CI_PROJECT_DIR/TF_Service_dotNet/TouchFree_Service/bin/Release/net6.0/linux-arm64/publish/*" ./Service_dotNet_Build_ARMLinux

    - mkdir ./Service_dotNet_Build_ARMLinux/ThirdParty
    - cp "$CI_PROJECT_DIR/Third_Party_Licenses/.NetRuntime.License.txt" ./Service_dotNet_Build_ARMLinux/ThirdParty
    - mv ./Service_dotNet_Build_ARMLinux/ThirdParty/.NetRuntime.License.txt ./Service_dotNet_Build_ARMLinux/ThirdParty/dotNetRuntime.License.txt
    - cp "$CI_PROJECT_DIR/Third_Party_Licenses/Newtonsoft.JSON.License.txt" ./Service_dotNet_Build_ARMLinux/ThirdParty

    # We don't sign the Linux builds as yet as we're not sure of the method.
    # - $cert=Get-ChildItem -Path Cert:\LocalMachine\My -CodeSigningCert
    # - Set-AuthenticodeSignature -FilePath "$CI_PROJECT_DIR/Service_dotNet_Build_ARMLinux/TouchFree_Service" -TimestampServer 'http://timestamp.comodoca.com/authenticode' -Certificate $cert
  artifacts:
    name: "TouchFree_Service_dotNet_ARMLinux"
    paths:
    - ./Service_dotNet_Build_ARMLinux/**
    expire_in: 2 weeks
    when: always
  tags:
    - docker-windows

Tracking::ARMLinux::download_package:
  stage: build
  when: always
  script:
    - cd ./Scripts/BrightSign_Scripts
    - python ./Download_Tracking.py -t ${env:GITLAB_TOKEN}
  after_script:
    - if (Test-Path "C:/build_machine_info.txt") { Get-Content "C:/build_machine_info.txt" }
  artifacts:
    paths:
    - ./Scripts/BrightSign_Scripts/Build_ARM64_Linux_release/*.tar.gz
    expire_in: 1 hour
  tags:
    - unity
    - win10

TF_Service::dotNet::test:
  stage: test
  when: always
  image: registry.ultrahaptics.com/xr/infrastucture/dotnet6-toolchain:latest
  script:
    # Run unit tests
    - dotnet test "$CI_PROJECT_DIR/TF_Service_dotNet/TouchFreeTests/TouchFreeTests.csproj" --logger:"junit;LogFilePath=$CI_PROJECT_DIR/TestResults/Test_Results.xml;MethodFormat=Class;FailureBodyFormat=Verbose"

  artifacts:
    when: always
    name: "TestResults"
    paths:
    - $CI_PROJECT_DIR/TestResults/Test_Results.xml
    reports:
      junit: $CI_PROJECT_DIR/TestResults/Test_Results.xml
  tags:
    - docker-windows

TF_Service::Tray::build:
  stage: build
  when: always
  script:
    - MSBuild.exe $CI_PROJECT_DIR/TF_Service_Utilities/ServiceUITray/ServiceUITray.sln /p:Configuration=Release /p:Platform=x64
    # Move the built tray app to the root directory
    - mkdir ./Service_Tray_Build
    - cp -R $CI_PROJECT_DIR/TF_Service_Utilities/ServiceUITray/ServiceUITray/bin/x64/Release/* ./Service_Tray_Build

    # Sign the executable with the UltraLeap certificate
    - $cert=Get-ChildItem -Path Cert:\LocalMachine\My -CodeSigningCert
    - Set-AuthenticodeSignature -FilePath $CI_PROJECT_DIR/Service_Tray_Build/ServiceUITray.exe -TimestampServer 'http://timestamp.comodoca.com/authenticode' -Certificate $cert
  artifacts:
    name: "TouchFree_Service_Tray"
    paths:
    - ./Service_Tray_Build/**
    expire_in: 2 weeks
    when: always
  tags:
    - unity
    - win10

TF_Settings::Windows::build:
  stage: build
  when: always
  script:
    # Get Unity version and changeset from the project.
    - $line = Get-Content  $TF_SETTINGS_PROJECT_PATH/ProjectSettings/ProjectVersion.txt | Select -Index 1
    - $UNITY_VERSION = $line -Split " " | Select -Index 1
    - $UNITY_CHANGESET = $line -Match '\((.+)\)' | ForEach-Object { $Matches[1] }
    # Check whether the required Unity version is installed. If not, install it.
    - Start-Process -Wait -RedirectStandardOutput "tmp.txt" -FilePath "$UNITY_HUB" -ArgumentList "-- --headless editors --installed"
    - Get-Content "tmp.txt"
    - Start-Process -Wait -RedirectStandardOutput "tmp.txt" -FilePath "$UNITY_HUB" -ArgumentList "-- --headless install-path --set C:/Unity"
    - Get-Content "tmp.txt"
    - if (-not (Test-Path "C:/Unity/$UNITY_VERSION")) { Start-Process -Wait -RedirectStandardOutput "tmp.txt" -FilePath "$UNITY_HUB" -ArgumentList "-- --headless install --version $UNITY_VERSION --changeset $UNITY_CHANGESET" }
    - Get-Content "tmp.txt"

    - $UNITY_EXE = "C:/Unity/$UNITY_VERSION/Editor/Unity.exe"
    - echo "$UNITY_EXE"

    # Update Version.txt with latest information before packaging
    - python ./Scripts/UpdateVersionFile.py --path ${env:TF_SETTINGS_PATH}/Version.txt --swVer ${env:TOUCHFREE_VERSION} --apiVer ${env:TF_TOOLING_API_VERSION} --ref ${env:CI_COMMIT_SHORT_SHA} --branchName "$CI_COMMIT_BRANCH"
    - Get-Content ${env:TF_PROJECT_PATH}/Assets/TouchFree_Application/Version.txt

    - mkdir $CI_PROJECT_DIR/UIBuild
    - cp ${env:TF_SETTINGS_PATH}/Version.txt $CI_PROJECT_DIR/UIBuild

    # Update ProjectSettings file with correct version & build settings
    - cd ./Scripts
    - python ./UpdateUnityProjVer.py --path ../TF_Settings_and_Tooling_Unity/ProjectSettings/ProjectSettings.asset --ver ${env:TOUCHFREE_VERSION}
    - "& ./build_settingsUI.bat $UNITY_EXE"

    # Sign the executable with the UltraLeap certificate
    - $cert=Get-ChildItem -Path Cert:\LocalMachine\My -CodeSigningCert
    - Set-AuthenticodeSignature -FilePath $CI_PROJECT_DIR/UIBuild/TouchFreeSettingsUI.exe -TimestampServer 'http://timestamp.comodoca.com/authenticode' -Certificate $cert
  artifacts:
    name: "TouchFree_Settings_${env:TOUCHFREE_VERSION}_${env:CI_COMMIT_SHORT_SHA}"
    paths:
    - UIBuild/**
    - ./SettingsUI_build.log
    expire_in: 2 weeks
    when: always
  tags:
    - unity
    - win10

TF_Settings::Web::build:
  stage: build
  when: always
  script:
    - cd ./TF_Settings_Web
    - npm install
    - npm run build
    - npx generate-license-file --input ./package.json --output ./build/ThirdPartyLicenses.txt --eol posix
  artifacts:
    name: "TouchFree_Settings_Web_${env:TOUCHFREE_VERSION}_${env:CI_COMMIT_SHORT_SHA}"
    paths:
    - ./TF_Settings_Web/build/*
    expire_in: 2 weeks
    when: always
  tags:
    - unity
    - win10

TouchFree::build:
  stage: build
  when: always
  script:
    # Get Unity version and changeset from the project.
    - $line = Get-Content  $TF_PROJECT_PATH/ProjectSettings/ProjectVersion.txt | Select -Index 1
    - $UNITY_VERSION = $line -Split " " | Select -Index 1
    - $UNITY_CHANGESET = $line -Match '\((.+)\)' | ForEach-Object { $Matches[1] }

    # Check whether the required Unity version is installed. If not, install it.
    - Start-Process -Wait -RedirectStandardOutput "tmp.txt" -FilePath "$UNITY_HUB" -ArgumentList "-- --headless editors --installed"
    - Get-Content "tmp.txt"
    - Start-Process -Wait -RedirectStandardOutput "tmp.txt" -FilePath "$UNITY_HUB" -ArgumentList "-- --headless install-path --set C:/Unity"
    - Get-Content "tmp.txt"
    - if (-not (Test-Path "C:/Unity/$UNITY_VERSION")) { Start-Process -Wait -RedirectStandardOutput "tmp.txt" -FilePath "$UNITY_HUB" -ArgumentList "-- --headless install --version $UNITY_VERSION --changeset $UNITY_CHANGESET" }
    - Get-Content "tmp.txt"

    - $UNITY_EXE = "C:/Unity/$UNITY_VERSION/Editor/Unity.exe"
    - echo "$UNITY_EXE"

    # Update Version.txt with latest information before packaging
    - python ./Scripts/UpdateVersionFile.py --path ${env:TF_PROJECT_PATH}/Assets/TouchFree_Application/Version.txt --apiVer ${env:TF_TOOLING_API_VERSION} --swVer ${env:TOUCHFREE_VERSION} --ref ${env:CI_COMMIT_SHORT_SHA} --branchName "$CI_COMMIT_BRANCH"
    - Get-Content "${env:TF_PROJECT_PATH}/Assets/TouchFree_Application/Version.txt"

    # Copy Version.txt to build folder
    - if (Test-Path -Path "./TouchFree_Build") {
        Remove-Item -LiteralPath ./TouchFree_Build -Force -Recurse
        Remove-Item -LiteralPath ./TouchFree_Build -Force -Recurse
      }
    - mkdir ./TouchFree_Build
    - cp ${env:CI_PROJECT_DIR}/TF_Application/Assets/TouchFree_Application/Version.txt ./TouchFree_Build

    # Copy Tooling to TF_Application
    - mkdir ${env:CI_PROJECT_DIR}/TF_Application/Assets/TouchFree/Tooling
    - cp -R ${env:CI_PROJECT_DIR}/TF_Settings_and_Tooling_Unity/Assets/TouchFree/Tooling/* ${env:CI_PROJECT_DIR}/TF_Application/Assets/TouchFree/Tooling

    # Build TouchFree
    - cd ./Scripts
    - python ./UpdateUnityProjVer.py --path ../TF_Application/ProjectSettings/ProjectSettings.asset --ver ${env:TOUCHFREE_VERSION}
    - "& ./build_touchfree.bat $UNITY_EXE"

    # Sign the executable with the UltraLeap certificate
    - $cert=Get-ChildItem -Path Cert:\LocalMachine\My -CodeSigningCert
    - Set-AuthenticodeSignature -FilePath $CI_PROJECT_DIR/TouchFree_Build/TouchFree.exe -TimestampServer 'http://timestamp.comodoca.com/authenticode' -Certificate $cert

  artifacts:
    name: "TouchFree_Build_${env:CI_COMMIT_SHORT_SHA}"
    paths:
      - ./TouchFree_Build/*
      - ./TouchFree_build.log
    expire_in: 2 weeks
    when: always
  tags:
    - unity
    - win10

Tracking::download:
  stage: build
  when: always
  script:
    - cd ./Scripts/
    - python ./Download_Tracking.py -t ${env:GITLAB_TOKEN} -j ${TARGET_TRACKING_JOBID_WIN}
    - mv ./Tracking_Build/Ultraleap_Tracking_Installer*win64.exe ./Tracking_Build/Tracking_for_TouchFree_${TOUCHFREE_VERSION}.exe
  after_script:
    - if (Test-Path "C:/build_machine_info.txt") { Get-Content "C:/build_machine_info.txt" }
  artifacts:
    paths:
    - ./Scripts/Tracking_Build/Tracking_for_TouchFree_*.exe
    expire_in: 1 hour
  tags:
    - unity

TF_Service::Integration::test:
  stage: test

  dependencies:
    - TF_Service::dotNet::Windows::build
  needs: ["TF_Service::dotNet::Windows::build"]

  script:
    - cd ./Testing/ServiceSocketTests/
    - npm install
    - ./node_modules/.bin/gulp build_machine_run

  artifacts:
    name: test_results
    paths:
      - ./Testing/ServiceSocketTests/results/**
      - ./Testing/ServiceSocketTests/PUT_TEST_BUILD_IN_HERE/**
    reports:
      junit: ./Testing/ServiceSocketTests/results/test_results.xml
    when: always
  tags:
    - unity
    - win10

TF_Tooling::Web::package:
  stage: package
  image: alpine:3.13
  dependencies:
    - TF_Tooling::Web::build
    - TF_Tooling::Docs::build
  needs: [
    "TF_Tooling::Web::build",
    "TF_Tooling::Docs::build"
  ]
  script:
    - mkdir ./Tooling_Package/
    - cp -R ./Tooling_Release/* ./Tooling_Package/
    - cp -R "./Documentation/Tooling for Web/" ./Tooling_Package/Documentation/
  artifacts:
    name: "TouchFree_Tooling_for_Web_${TF_TFW_VERSION}_${CI_COMMIT_SHORT_SHA}"
    paths:
      - ./Tooling_Package/*
    expire_in: 2 weeks
    when: always
  tags:
    - docker

TF_Tooling::Unity::package:
  stage: package
  image: alpine:3.13
  dependencies:
    - TF_Tooling::Unity::build
    - TF_Tooling::Docs::build
  needs: [
    "TF_Tooling::Unity::build",
    "TF_Tooling::Docs::build"
  ]
  script:
    - mkdir ./Tooling_Package/
    - cp -R ./Tooling_Release/* ./Tooling_Package/
    - cp -R "./Documentation/Tooling for Unity/" ./Tooling_Package/Documentation/
  artifacts:
    name: "TouchFree_Tooling_for_Unity_${TF_TFU_VERSION}_${CI_COMMIT_SHORT_SHA}"
    paths:
      - ./Tooling_Package/*
    expire_in: 2 weeks
    when: always
  tags:
    - docker

TF_Service::Windows::package:
  stage: package
  dependencies:
    - TF_Settings::Windows::build
    - TF_Settings::Web::build
    - TF_Service::dotNet::Windows::build
    - TF_Service::Wrapper::build
    - TF_Service::Tray::build
  needs: [
    "TF_Service::dotNet::Windows::build",
    "TF_Settings::Web::build",
    "TF_Settings::Windows::build",
    "TF_Service::Wrapper::build",
    "TF_Service::Tray::build"
  ]
  script:
    # Package Service up neatly
    - mkdir ./Service_Package/
    - mkdir ./Service_Package/Service/
    - mkdir ./Service_Package/SettingsUI/
    - mkdir ./Service_Package/Wrapper/
    - mkdir ./Service_Package/Wrapper/wwwroot/
    - mkdir ./Service_Package/Tray/
    - mkdir ./Service_Package/Licenses/
    - cp -R ./Service_dotNet_Build/* ./Service_Package/Service/
    - cp -R ./UIBuild/* ./Service_Package/SettingsUI/
    - cp -R ./Service_Wrapper_Build/* ./Service_Package/Wrapper/
    - cp -R ./TF_Settings_Web/build/* ./Service_Package/Wrapper/wwwroot
    - cp -R ./Service_Tray_Build/* ./Service_Package/Tray/
    - cp -R ./Third_Party_Licenses/* ./Service_Package/Licenses/

  artifacts:
    name: "TouchFree_Service_Package_${CI_COMMIT_SHORT_SHA}"
    paths:
      - ./Service_Package
    expire_in: 2 weeks
    when: always
  tags:
    - unity
    - win10

TF_Service::dotNet::Brightsign::example:
  stage: package
  dependencies:
    - TF_Tooling::Web::package
  needs: [
    "TF_Tooling::Web::package"
  ]
  script:
    # Run innosetup
    - mkdir ./BS_Example_Package
    - cp ./Scripts/BrightSign_Scripts/QuickStart-autorun.brs ./BS_Example_package
    - mv ./BS_Example_package/QuickStart-autorun.brs ./BS_Example_package/autorun.brs
    - cp -R ./Tooling_Package* ./BS_Example_package

  artifacts:
    name: "BrightSign_Example_Package_${CI_COMMIT_SHORT_SHA}"
    paths:
    - ./BS_Example_Package
    expire_in: 2 weeks
    when: always
  tags:
    - win10

TF_Service::ARMLinux::package:
  stage: package
  image: ubuntu:20.04
  dependencies:
    - Tracking::ARMLinux::download_package
    - TF_Settings::Web::build
    - TF_Service::dotNet::ARMLinux::build
  needs: [
    "Tracking::ARMLinux::download_package",
    "TF_Settings::Web::build",
    "TF_Service::dotNet::ARMLinux::build"
  ]
  script:
    - apt-get update
    - apt-get --assume-yes install squashfs-tools

    # Uncompress & chmod TouchFree Service
    - ln ./Service_dotNet_Build_ARMLinux/libatomic.so.1.2.0 ./Service_dotNet_Build_ARMLinux/libatomic.so.1
    - ln ./Service_dotNet_Build_ARMLinux/libLeapC.so.5 ./Service_dotNet_Build_ARMLinux/libLeapC.so
    - ln ./Service_dotNet_Build_ARMLinux/libstdc++.so.6.0.28 ./Service_dotNet_Build_ARMLinux/libstdc++.so.6
    - chmod +x ./Service_dotNet_Build_ARMLinux/TouchFree_Service

    # Uncompress & chmod tracking service
    - cd $CI_PROJECT_DIR/Scripts/BrightSign_Scripts/
    - tar -xzf ./Build_ARM64_Linux_release/Ultraleap_Tracking_Installer_*.tar.gz
    - chmod +x ./TrackingService/bin/libtrack_server

    # Combine services into one directory
    - mkdir ./TouchFree_Extension
    - mkdir ./TouchFree_Extension/TouchFree
    - mkdir ./TouchFree_Extension/wwwroot
    - mkdir ./TouchFree_Extension/Tracking
    - mkdir ./TouchFree_Extension/Tracking/bin
    - cp -R ./TrackingService/bin/* ./TouchFree_Extension/Tracking/bin
    - cp ./LeapSDK/ThirdPartyNotices.md ./TouchFree_Extension/Tracking
    - cp -R $CI_PROJECT_DIR/Service_dotNet_Build_ARMLinux/* ./TouchFree_Extension/TouchFree
    - cp -R $CI_PROJECT_DIR/TF_Settings_Web/build/* ./TouchFree_Extension/wwwroot

    - cp $CI_PROJECT_DIR/Scripts/BrightSign_Scripts/Version.txt ./TouchFree_Extension

    - cd "$CI_PROJECT_DIR/Scripts/BrightSign_Scripts/"
    - chmod +x ./make-extension-ubi
    - ./make-extension-ubi ./TouchFree_Extension/ $BS_EXTENSION_NAME

    - mkdir $CI_PROJECT_DIR/TF_Service_BS/
    - cp ./build-$BS_EXTENSION_NAME/*.tar.gz $CI_PROJECT_DIR/TF_Service_BS/
  artifacts:
    name: "TouchFree_BrightSign_${TOUCHFREE_VERSION}_${CI_COMMIT_SHORT_SHA}"
    paths:
      - "$CI_PROJECT_DIR/TF_Service_BS/*"
    expire_in: 2 weeks
    when: always
  tags:
    - docker

TouchFree::installer:
  stage: installer
  dependencies:
    - TF_Service::Windows::package
    - Tracking::download
    - TouchFree::build
  needs: [
    "TF_Service::Windows::package",
    "Tracking::download",
    "TouchFree::build"
  ]
  script:
    # Run innosetup
    - cd ./Scripts/
    - "& ./compile_installer.bat ${env:TOUCHFREE_VERSION} $CI_PROJECT_DIR/TF_Service_Utilities/Installer/TouchFree_Installer.iss"

    # Sign the installer with the UltraLeap certificate
    - $cert=Get-ChildItem -Path Cert:\LocalMachine\My -CodeSigningCert
    - Set-AuthenticodeSignature -FilePath "$CI_PROJECT_DIR/Installer_Build/TouchFree_${TOUCHFREE_VERSION}_Installer.exe" -TimestampServer 'http://timestamp.comodoca.com/authenticode' -Certificate $cert
  artifacts:
    name: "TouchFree_Installer_${TOUCHFREE_VERSION}_${CI_COMMIT_SHORT_SHA}"
    paths:
      - ./Installer_Build/*.exe
    expire_in: 2 weeks
    when: always
  tags:
    - unity
    - win10
